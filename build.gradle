plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.6'
    id 'io.spring.dependency-management' version '1.1.6'


}

group = 'ipp'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudGcpVersion', "5.8.0")
    set('springCloudVersion', "2023.0.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.google.cloud:spring-cloud-gcp-starter'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework:spring-jdbc:5.3.26'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'


    compileOnly 'org.projectlombok:lombok:1.18.24' // Use the latest version
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    implementation 'com.google.cloud:spring-cloud-gcp-starter-data-spanner:3.4.0'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.0.0'
    implementation 'org.hibernate:hibernate-core:5.6.9.Final'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'



}

dependencyManagement {
    imports {
        mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"

    }
}

tasks.named('test') {
    useJUnitPlatform()
}
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.10" // Use latest stable version
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom files(classDirectories.files.collect {
            fileTree(dir: it, include: [
                'com/autofiller/service/**',
                'com/autofiller/controller/**',
                'com/autofiller/util/**'
            ])
        })
    }
}


